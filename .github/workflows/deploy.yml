name: Deploy Element UI X

on:
  push:
    branches: [master]
    paths:
      - 'docs/**'
      - 'examples/**'
      - 'packages/element-ui-x/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [master]
    paths:
      - 'docs/**'
      - 'examples/**'
      - 'packages/element-ui-x/**'
  pull_request_target:
    types: [closed]
    branches: [master]
    paths:
      - 'docs/**'
      - 'examples/**'
      - 'packages/element-ui-x/**'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: '部署目标'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - docs
          - examples

jobs:
  deploy-docs:
    name: 部署文档站
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'docs' }}
    runs-on: ubuntu-latest
    env:
      VUEPRESS_GA_ID: ${{ secrets.VUEPRESS_GA_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get package version and prepare for deployment
        id: version-setup
        run: |
          # 获取主包版本号
          MAIN_VERSION=$(node -p "require('./packages/element-ui-x/package.json').version")
          echo "Main package version: $MAIN_VERSION"
          echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT

          # 检查NPM包是否存在
          echo "Checking if NPM package exists..."
          if npm view vue-element-ui-x@$MAIN_VERSION version 2>/dev/null; then
            echo "✅ NPM package vue-element-ui-x@$MAIN_VERSION exists"
            echo "npm-exists=true" >> $GITHUB_OUTPUT
            
            # 创建部署用的docs目录副本
            echo "Creating deployment copy with NPM dependency..."
            cp -r docs docs-deploy
            
            # 修改部署副本的package.json
            node -e "
              const fs = require('fs');
              const docsPackage = JSON.parse(fs.readFileSync('docs-deploy/package.json', 'utf8'));
              docsPackage.dependencies['vue-element-ui-x'] = '^$MAIN_VERSION';
              fs.writeFileSync('docs-deploy/package.json', JSON.stringify(docsPackage, null, 2) + '\n');
              console.log('Updated deployment package.json to version: ^$MAIN_VERSION');
            "
            
            echo "deploy-dir=docs-deploy" >> $GITHUB_OUTPUT
          else
            echo "❌ NPM package vue-element-ui-x@$MAIN_VERSION does not exist"
            echo "npm-exists=false" >> $GITHUB_OUTPUT
            
            # 构建本地包
            echo "Building local package..."
            cd packages/element-ui-x
            npm install
            npm run build
            cd ../..
            
            # 直接使用原始docs目录
            echo "deploy-dir=docs" >> $GITHUB_OUTPUT
          fi

      - name: Install and build documentation
        run: |
          DEPLOY_DIR="${{ steps.version-setup.outputs.deploy-dir }}"
          echo "Using deployment directory: $DEPLOY_DIR"

          cd $DEPLOY_DIR

          # 显示当前使用的依赖
          echo "Current dependency in $DEPLOY_DIR:"
          node -p "require('./package.json').dependencies['vue-element-ui-x']"

          # 安装依赖
          echo "Installing dependencies..."
          npm install --verbose

          # 验证安装
          echo "Verifying vue-element-ui-x installation..."
          npm list vue-element-ui-x || echo "Package not found"

          # 构建
          echo "Building documentation..."
          npm run build

      - name: Deploy to Vercel
        id: deploy-docs
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_DOCS }}
          working-directory: ./${{ steps.version-setup.outputs.deploy-dir }}
          vercel-args: ${{ github.event_name == 'push' && '--prod' || '' }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const npmExists = '${{ steps.version-setup.outputs.npm-exists }}' === 'true';
            const version = '${{ steps.version-setup.outputs.version }}';
            let body = '📖 文档预览: ${{ steps.deploy-docs.outputs.preview-url }}';

            if (npmExists) {
              body += `\n🔄 使用NPM版本: ${version}`;
            } else {
              body += `\n🔧 使用本地构建版本: ${version} (NPM版本不存在)`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  deploy-examples:
    name: 部署示例项目
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'examples' }}
    runs-on: ubuntu-latest
    env:
      VUEPRESS_GA_ID: ${{ secrets.VUEPRESS_GA_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get package version and prepare for deployment
        id: version-setup
        run: |
          # 获取主包版本号
          MAIN_VERSION=$(node -p "require('./packages/element-ui-x/package.json').version")
          echo "Main package version: $MAIN_VERSION"
          echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT

          # 检查NPM包是否存在
          echo "Checking if NPM package exists..."
          if npm view vue-element-ui-x@$MAIN_VERSION version 2>/dev/null; then
            echo "✅ NPM package vue-element-ui-x@$MAIN_VERSION exists"
            echo "npm-exists=true" >> $GITHUB_OUTPUT
            
            # 创建部署用的examples目录副本
            echo "Creating deployment copy with NPM dependency..."
            cp -r examples examples-deploy
            
            # 修改部署副本的package.json
            node -e "
              const fs = require('fs');
              const examplesPackage = JSON.parse(fs.readFileSync('examples-deploy/package.json', 'utf8'));
              examplesPackage.dependencies['vue-element-ui-x'] = '^$MAIN_VERSION';
              fs.writeFileSync('examples-deploy/package.json', JSON.stringify(examplesPackage, null, 2) + '\n');
              console.log('Updated deployment package.json to version: ^$MAIN_VERSION');
            "
            
            echo "deploy-dir=examples-deploy" >> $GITHUB_OUTPUT
          else
            echo "❌ NPM package vue-element-ui-x@$MAIN_VERSION does not exist"
            echo "npm-exists=false" >> $GITHUB_OUTPUT
            
            # 构建本地包
            echo "Building local package..."
            cd packages/element-ui-x
            npm install
            npm run build
            cd ../..
            
            # 直接使用原始examples目录
            echo "deploy-dir=examples" >> $GITHUB_OUTPUT
          fi

      - name: Install and build examples
        run: |
          DEPLOY_DIR="${{ steps.version-setup.outputs.deploy-dir }}"
          echo "Using deployment directory: $DEPLOY_DIR"

          cd $DEPLOY_DIR

          # 显示当前使用的依赖
          echo "Current dependency in $DEPLOY_DIR:"
          node -p "require('./package.json').dependencies['vue-element-ui-x']"

          # 安装依赖
          echo "Installing dependencies..."
          npm install --verbose

          # 验证安装
          echo "Verifying vue-element-ui-x installation..."
          npm list vue-element-ui-x || echo "Package not found"

          # 构建
          echo "Building examples..."
          npm run build

      - name: Deploy to Vercel
        id: deploy-examples
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_EXAMPLES }}
          working-directory: ./${{ steps.version-setup.outputs.deploy-dir }}
          vercel-args: ${{ github.event_name == 'push' && '--prod' || '' }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const npmExists = '${{ steps.version-setup.outputs.npm-exists }}' === 'true';
            const version = '${{ steps.version-setup.outputs.version }}';
            let body = '🚀 示例预览: ${{ steps.deploy-examples.outputs.preview-url }}';

            if (npmExists) {
              body += `\n🔄 使用NPM版本: ${version}`;
            } else {
              body += `\n🔧 使用本地构建版本: ${version} (NPM版本不存在)`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
